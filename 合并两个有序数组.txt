给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。

说明:

初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
示例:

输入:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

输出: [1,2,2,3,5,6]

两个数组都有序且nums1无限大，也给定两数组大小，新数组大小就是m+n，所以设定三个指针分别指向两个原数组和一个新数组末尾，比较num1和num2指针指向的数
大小，放入新数组指针指向的位置，然后k--, i或者j--。
注意当有一个数组的数字放完后，i或者j就会变成-1（因为i=m-1, j=n-1），如果nums2先被消耗完就不做操作（因为num1也是新数组，不需要原地搬运）,而nums1被消
耗完后需要单独将nums2剩下的数组搬运到nums1前面。

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1, j = n - 1, k = m + n - 1;
        while(i >= 0 && j >= 0)
        {
            if(nums1[i] > nums2[j])
            {
                nums1[k--] = nums1[i--];
            }
            else
            {
                nums1[k--] = nums2[j--];
            }
        }
        while(j >= 0)
            nums1[k--] = nums2[j--];
    }
};
