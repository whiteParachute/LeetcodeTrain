你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。

每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。

你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。

每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。

你的目标是确切地知道 F 的值是多少。

无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？

 

示例 1：

输入：K = 1, N = 2
输出：2
解释：
鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
如果它没碎，那么我们肯定知道 F = 2 。
因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。
示例 2：

输入：K = 2, N = 6
输出：3
示例 3：

输入：K = 3, N = 14
输出：4
 

提示：

1 <= K <= 100
1 <= N <= 10000


二维DP
当我们在第 x 层扔鸡蛋时，有两种情况：

如果鸡蛋碎了，为了使 dp[i][j] 测出的层数最多，我们当然希望 i-1 个鸡蛋在后面的 j-1 次尝试中测出的层数最多，这是一个子问题，即 dp[i-1][j-1]；
如果鸡蛋没碎，我们同样要用 i 个鸡蛋在 j-1 次尝试中测出最多的层数，即 dp[i][j-1]。
因此，有下面的状态转移方程：

dp[i][j]=1+dp[i−1][j−1]+dp[i][j−1]dp[i][j] = 1 + dp[i-1][j-1] + dp[i][j-1]
dp[i][j]=1+dp[i−1][j−1]+dp[i][j−1]


class Solution {
public:
    int superEggDrop(int K, int N) {
        vector<vector<int>> dp(K + 1, vector<int>(N + 1, 0));
        
        // 注意是竖着打表
        for (int j=1; j<=N; j++) {
            for (int i=1; i<=K; i++) {
                dp[i][j] = 1 + dp[i-1][j-1] + dp[i][j-1];
                if (dp[i][j-1] < N && dp[i][j] >= N) {
                    return j;
                }
            }
        }
        
        return N;
    }
};
