编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：

每行的元素从左到右升序排列。
每列的元素从上到下升序排列。
示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。

对于已排序二维数组，右上角和左下角的数是特殊点，如左下角，上面的数字比它小，右面的数字比它大，利用这一特点快速搜索整个矩阵，时间复杂度就能控制在O(n + m)，
空间复杂度O(1)。
还需判断输入空矩阵时的特殊返回值。


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        if(row == 0) return 0;
        int col = matrix[0].size();
        
        int res = 0;

        int i = row-1, j = 0;       //左下角
        
        while(i >= 0 && j < col){
            if(matrix[i][j] == target){
                res++;
                break;
            }else if(matrix[i][j] > target)
                i--;
            else
                j++;
        }
        
        return res;
    }
};
